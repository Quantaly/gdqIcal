package lib

import (
	"fmt"
	"io"
	"log"
	"net/http"

	"golang.org/x/net/html"
)

// GenerateCalendar generates the iCalendar file into w
func GenerateCalendar(w io.Writer, scheduleURL string) {
	fmt.Fprintf(w, "BEGIN:VCALENDAR\r\n")
	fmt.Fprintf(w, "PRODID:-//Kai Page//github.com/Quantaly/gdqIcal//EN\r\n")
	fmt.Fprintf(w, "VERSION:2.0\r\n")
	defer fmt.Fprintf(w, "END:VCALENDAR\r\n")

	resp, err := http.Get(scheduleURL)
	if err != nil {
		log.Println("GenerateCalendar:", err)
		return
	}

	doc, err := html.Parse(resp.Body)
	resp.Body.Close()
	if err != nil {
		log.Println("GenerateCalendar:", err)
		return
	}

	h1 := findTag(doc, "h1")
	if h1 == nil {
		log.Println("GenerateCalendar: h1 not found")
		return
	}
	fmt.Fprintf(w, "X-WR-CALNAME:%s\r\n", h1.FirstChild.Data)
	fmt.Fprintf(w, "X-WR-CALDESC:Autogenerated from %s\r\n", scheduleURL)

	tbody := findTag(doc, "tbody")
	if tbody == nil {
		log.Println("GenerateCalendar: tbody not found")
		return
	}

	// parse games
	for firstRow := nextElement(tbody.FirstChild); firstRow != nil; firstRow = nextElement(nextElement(firstRow)) {
		game, err := ParseGame(firstRow)
		if err != nil {
			log.Println("GenerateCalendar:", err)
			return
		}
		game.WriteIcalEvent(w)
	}
}
